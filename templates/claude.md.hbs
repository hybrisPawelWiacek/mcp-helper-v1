# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with this project.

> Generated by MCP Helper on {{generatedAt}}
> Project: {{projectPath}}

## Project Status: {{projectStatus.project}} ({{projectStatus.overall_completion}}% Complete)

> **Last Updated**: {{projectStatus.last_updated}}

### Features Progress
{{#each projectStatus.features}}
- **{{this.name}}**: {{this.completion}}% complete
{{/each}}

### Critical Notes
{{#each projectStatus.critical_notes}}
- {{this}}
{{/each}}

## MCP-Helper Implementation

This project uses **mcp-helper** as a **slash command extension** for Claude Code CLI. MCP servers are configured through commands like `/mcp-helper add github` directly in the Claude Code conversation.

### Available Commands
- `/mcp-helper init` - Initialize project and detect environment
- `/mcp-helper add <server>` - Add new MCP server configuration
- `/mcp-helper add-custom` - Add custom MCP server not in catalog ({{projectStatus.features.custom_server_support.completion}}% complete)
- `/mcp-helper list` - List configured servers with status
- `/mcp-helper reconfigure <server>` - Modify server configuration

## MCP Server Configuration Status

### Active Servers ({{servers.length}} configured)

| Server | Scope | Status | Human | Agent | Description |
|--------|-------|--------|-------|-------|-------------|
{{#each servers}}
| **{{name}}** | {{scope}} | {{#if (eq status 'configured')}}✅{{else}}⚠️{{/if}} | {{card.agenticUsefulness.humanVerificationRating}}/5 | {{card.agenticUsefulness.aiAgentRating}}/5 | {{description}} |
{{/each}}

{{#if requiredEnvVars.length}}
## ⚠️ Missing Environment Variables

The following environment variables need to be configured:

{{#each requiredEnvVars}}
### {{name}}
- **Required by**: {{#each servers}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}
- **Description**: {{description}}
{{#if example}}- **Example**: `{{example}}`{{/if}}
{{/each}}

Configure these in your `.env` file or use `/mcp-helper reconfigure <server>`.
{{/if}}

## Agentic Usefulness Ratings

### Essential for AI Agents (Rating 5)
{{#each agenticRatings.highAgentValue}}
- **{{name}}** ({{rating}}/5): {{rationale}}
{{/each}}

### Essential for Human Verification (Rating 4-5)
{{#each agenticRatings.highHumanValue}}
- **{{name}}** ({{rating}}/5): {{rationale}}
{{/each}}

### Balanced Value (Good for Both)
{{#each agenticRatings.balanced}}
- **{{name}}** (Human: {{humanRating}}/5, Agent: {{agentRating}}/5)
{{/each}}

## CRITICAL: MCP Tools Usage Protocol

### Tool Selection Hierarchy

**PRIMARY TOOLS** (Use First):
{{#each mcpUsageProtocol.primaryTools}}
1. {{this}}
{{/each}}

### Task Management: TodoWrite and Sequential Thinking Synergy

#### Primary Tool Responsibilities

**TodoWrite (Native Claude Code)** - PRIMARY for task management:
- Creating and tracking task lists
- Managing task states (pending, in_progress, completed)
- Organizing multi-step workflows
- Providing visibility of progress to users

**Sequential Thinking (MCP Server)** - Planning and deep reasoning:
- **In PLAN MODE**: Primary tool for planning implementation steps
- **In regular mode**: Deep analysis WITHIN TodoWrite tasks
- Planning implementation strategies for specific tasks
- Working through multi-step logic when stuck
- Hypothesis generation and verification

#### Correct Usage Patterns

**Plan Mode (Feature Planning):**
```
1. Enter plan mode (if prompted)
2. Sequential Thinking → Plan implementation steps
3. ExitPlanMode → Present plan to user
4. Upon approval → TodoWrite creates tasks from plan
```

**Regular Mode (Task Execution):**
```
1. TodoWrite → Create task list
2. TodoWrite → Mark task as in_progress
3. Sequential Thinking → Analyze HOW to implement
4. Implement based on analysis
5. TodoWrite → Mark as completed
```

### Efficiency Rules

**Use Native Tools When More Efficient**:
- `Bash` for simple commands (ls, cat, echo)
- `Read` for small, specific file reads
- `Edit/MultiEdit` for direct file modifications
- `TodoWrite` for task management

**Use MCP Tools When**:
- Task matches server's specialized purpose
- Native tools would require multiple operations
- Dealing with external resources
- Need semantic understanding (serena)

### Fallback Strategy (When Stuck)

**After 2 Failed Attempts**:
{{#each mcpUsageProtocol.fallbackStrategy}}
- {{this}}
{{/each}}

**Tool Alternation Map**:
- `Read/Grep` ↔ `serena` (code navigation)
- `WebSearch` ↔ `perplexity-ask` (research)
- `WebFetch` ↔ `firecrawl` (scraping)
- `Bash(git)` ↔ `github-official` (repo operations)

### System Prompt Integration

**For perplexity-ask** (ALWAYS include):
```json
{
  "messages": [
    {
      "role": "system",
      "content": "You are a senior software developer assistant helping with practical MVP-level solutions. Focus on production-ready, maintainable code patterns and real-world implementation details."
    },
    {
      "role": "user",
      "content": "<actual query>"
    }
  ]
}
```

## Server Categories

{{#each categories}}
### {{name}} Servers
{{#each servers}}
- **{{name}}** {{#if card.agenticUsefulness}}(Human: {{card.agenticUsefulness.humanVerificationRating}}/5, Agent: {{card.agenticUsefulness.aiAgentRating}}/5){{/if}}
  {{#if card.agenticUsefulness.bestPractices}}
  Best practices:
  {{#each card.agenticUsefulness.bestPractices}}
  - {{this}}
  {{/each}}
  {{/if}}
{{/each}}

{{/each}}

## Essential Servers Not Yet Configured

{{#if essentialServers.forAgents.length}}
### Recommended for AI Agents
{{#each essentialServers.forAgents}}
{{#unless (includes ../servers.id this.id)}}
- **{{id}}** (Agent: {{agenticUsefulness.aiAgentRating}}/5): {{name}}
  - {{useCases.generic.[0]}}
  - Add with: `/mcp-helper add {{id}}`
{{/unless}}
{{/each}}
{{/if}}

{{#if essentialServers.forHumans.length}}
### Recommended for Human Verification
{{#each essentialServers.forHumans}}
{{#unless (includes ../servers.id this.id)}}
- **{{id}}** (Human: {{agenticUsefulness.humanVerificationRating}}/5): {{name}}
  - {{useCases.generic.[0]}}
  - Add with: `/mcp-helper add {{id}}`
{{/unless}}
{{/each}}
{{/if}}

## Integration Synergies

### Powerful Combinations
{{#each servers}}
{{#if card.agenticUsefulness.integrationSynergies}}
**{{name}}** works well with:
{{#each card.agenticUsefulness.integrationSynergies}}
- {{this}}
{{/each}}
{{/if}}
{{/each}}

## Project-Specific Configuration

### Environment Variables
- **Global defaults**: `~/.claude-env`
- **Project overrides**: `.env` (this directory)
- **Priority**: Project > Global > Defaults

### Configuration Files
- **Global MCP config**: `~/.claude.json`
- **Project env**: `.env`
- **Server cards**: `new_start/mcp-helper/catalog/server_cards/`

## Quick Reference

### Common Operations
```bash
# Check server status
/mcp-helper list

# Add essential server
/mcp-helper add serena

# Fix missing env vars
/mcp-helper reconfigure <server>

# Verify in Claude Code
/mcp list
```

### Troubleshooting

#### Missing Environment Variables
If you see ⚠️ status for any server:
1. Check `.env` file for missing variables
2. Use `/mcp-helper reconfigure <server>` to fix
3. Restart Claude Code after changes

#### Docker Issues
For Docker-based servers:
```bash
docker --version
docker ps
```

#### NPX Issues
For NPX-based servers:
```bash
node --version
npm --version
```

#### Python/UV Issues
For UV-based servers:
```bash
uv --version
python --version
```

## Usage Tracking

**MANDATORY Actions**:
1. Start complex tasks with `sequentialthinking` (in plan mode or within tasks)
2. Save progress with `memory` at milestones
3. Use `serena` for ALL project code navigation
4. Include system prompts in research queries
5. Switch tools after 2 failed attempts

## Key Principles

1. **Plan Mode Exception** - Sequential Thinking leads planning in plan mode
2. **TodoWrite owns task management** - It creates, tracks, and completes tasks
3. **Sequential Thinking owns deep reasoning** - It analyzes HOW to implement
4. **Mode awareness is critical** - Different patterns for plan mode vs regular mode
5. **Tools work together, not in competition** - Each tool has its place

## Notes

- Generated at: {{generatedAt}}
- Total configured servers: {{servers.length}}
- Global servers: {{globalServers.length}}
- Project-specific: {{projectServers.length}}
- Backups stored in: `~/.mcp-helper/backups/`

## Further Information

- [MCP Documentation](https://modelcontextprotocol.io)
- [Project README](./README.md)
- [Server Cards Documentation](./new_start/mcp-helper/catalog/README.md)
