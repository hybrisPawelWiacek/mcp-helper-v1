/**
 * MCP Helper Postinstall Script
 * Automatically sets up MCP Helper after npm installation
 */

import fs from 'fs-extra';
import path from 'path';
import os from 'os';
import chalk from 'chalk';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

async function postinstall() {
  console.log(chalk.blue.bold('\nüöÄ MCP Helper - Post-installation Setup\n'));

  try {
    // Check if running in global install
    const isGlobal = process.env.npm_config_global === 'true';
    
    if (isGlobal) {
      console.log(chalk.yellow('üì¶ Global installation detected'));
      
      // Check for Claude Code installation
      const claudeConfigPath = path.join(os.homedir(), '.claude.json');
      const claudeConfigExists = await fs.pathExists(claudeConfigPath);
      
      if (claudeConfigExists) {
        console.log(chalk.green('‚úì Claude Code configuration found'));
        
        // Note: Actual slash command registration would require Claude Code API
        // For now, we provide instructions
        console.log(chalk.yellow('\n‚ö†Ô∏è  Manual setup required:'));
        console.log('   Claude Code slash commands must be registered manually.');
        console.log('   In your Claude Code session, type:');
        console.log(chalk.cyan('   /mcp-helper init'));
        console.log('   This will initialize MCP Helper in your project.\n');
      } else {
        console.log(chalk.yellow('‚ö†Ô∏è  Claude Code configuration not found'));
        console.log('   Make sure Claude Code is installed and configured.');
        console.log('   Visit: https://claude.ai/code for installation instructions.\n');
      }
    }
    
    // Generate initial CLAUDE.md in current directory (if not exists)
    const claudeMdPath = path.join(process.cwd(), 'CLAUDE.md');
    const claudeMdExists = await fs.pathExists(claudeMdPath);
    
    if (!claudeMdExists && !isGlobal) {
      console.log(chalk.yellow('üìÑ Generating initial CLAUDE.md...'));
      
      const claudeMdContent = `# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with this project.

## MCP Helper Setup

MCP Helper has been installed in this project. To configure MCP servers:

### Quick Start

1. Initialize MCP Helper:
   \`\`\`bash
   mcp-helper init
   \`\`\`

2. Add essential servers:
   \`\`\`bash
   mcp-helper add serena
   mcp-helper add github-official
   mcp-helper add perplexity-ask
   \`\`\`

3. List configured servers:
   \`\`\`bash
   mcp-helper list
   \`\`\`

### Available Commands

- \`mcp-helper init\` - Initialize project with MCP Helper
- \`mcp-helper add <server>\` - Add new MCP server
- \`mcp-helper list\` - List configured servers
- \`mcp-helper reconfigure <server>\` - Modify server configuration
- \`mcp-helper help\` - Show help information

### Minimum Required Servers

For optimal custom server support, configure at least these servers:
- **serena** - Semantic code understanding
- **memory** or **openmemory** - Persistent context
- **perplexity-ask** - Research capabilities

### Documentation

For complete documentation, visit: https://github.com/mcp-helper/mcp-helper

---
Generated by MCP Helper v1.0.0
`;
      
      await fs.writeFile(claudeMdPath, claudeMdContent);
      console.log(chalk.green('‚úì Created CLAUDE.md with setup instructions'));
    }
    
    // Show success message with next steps
    console.log(chalk.green.bold('\n‚úÖ MCP Helper installation complete!\n'));
    
    console.log(chalk.cyan('Next steps:'));
    if (isGlobal) {
      console.log('1. Run ' + chalk.yellow('mcp-helper init') + ' in your project directory');
      console.log('2. Configure essential MCP servers with ' + chalk.yellow('mcp-helper add'));
      console.log('3. Verify setup with ' + chalk.yellow('mcp-helper list'));
    } else {
      console.log('1. Run ' + chalk.yellow('npx mcp-helper init') + ' to initialize');
      console.log('2. Add MCP servers with ' + chalk.yellow('npx mcp-helper add <server>'));
      console.log('3. Check status with ' + chalk.yellow('npx mcp-helper list'));
    }
    
    console.log('\n' + chalk.gray('For help: mcp-helper help'));
    console.log(chalk.gray('Documentation: https://github.com/mcp-helper/mcp-helper\n'));
    
  } catch (error) {
    console.error(chalk.red('‚ùå Post-installation setup failed:'), error.message);
    console.error(chalk.gray('This is not critical - you can still use MCP Helper manually.'));
    // Don't fail the installation
    process.exit(0);
  }
}

// Only run if this is the main module
if (process.argv[1] === fileURLToPath(import.meta.url)) {
  postinstall().catch(console.error);
}

export default postinstall;